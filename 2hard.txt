class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        deque<int> d1;
        vector<int> ans;
        
        for (int i = 0; i < nums.size(); i++) {
            // Remove indices that are out of the current window range
            while (!d1.empty() && d1.front() <= i - k) {
                d1.pop_front();
            }
            
            // Remove elements from the end of deque smaller than the current element
            while (!d1.empty() && nums[d1.back()] <= nums[i]) {
                d1.pop_back();
            }
            
            // Push current index into the deque
            d1.push_back(i);
            
            // Check if window is formed completely
            if (i >= k - 1) {
                ans.push_back(nums[d1.front()]);
            }
        }
        
        return ans;
    }
};
